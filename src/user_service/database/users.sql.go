// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, modified_at, email, password) 
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, modified_at, email, password, name
`

type CreateUserParams struct {
	ID         pgtype.UUID
	CreatedAt  pgtype.Timestamp
	ModifiedAt pgtype.Timestamp
	Email      string
	Password   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Email,
		&i.Password,
		&i.Name,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id=$1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, modified_at, email, password, name FROM users WHERE email=$1 FOR UPDATE NOWAIT
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Email,
		&i.Password,
		&i.Name,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, modified_at, email, password, name FROM users WHERE id=$1 FOR UPDATE NOWAIT
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Email,
		&i.Password,
		&i.Name,
	)
	return i, err
}

const updateUserDetails = `-- name: UpdateUserDetails :one
UPDATE users SET email=$1, name=$2, modified_at=$3
WHERE id=$4
RETURNING id, created_at, modified_at, email, password, name
`

type UpdateUserDetailsParams struct {
	Email      string
	Name       pgtype.Text
	ModifiedAt pgtype.Timestamp
	ID         pgtype.UUID
}

func (q *Queries) UpdateUserDetails(ctx context.Context, arg UpdateUserDetailsParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserDetails,
		arg.Email,
		arg.Name,
		arg.ModifiedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Email,
		&i.Password,
		&i.Name,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET password=$1, modified_at=$2
WHERE id=$3
`

type UpdateUserPasswordParams struct {
	Password   string
	ModifiedAt pgtype.Timestamp
	ID         pgtype.UUID
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.Password, arg.ModifiedAt, arg.ID)
	return err
}
