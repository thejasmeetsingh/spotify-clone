// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: content.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addContent = `-- name: AddContent :one
INSERT INTO content (id, created_at, modified_at, user_id, title, description, type, s3_key) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, modified_at, user_id, title, description, type, s3_key
`

type AddContentParams struct {
	ID          uuid.UUID
	CreatedAt   pgtype.Timestamp
	ModifiedAt  pgtype.Timestamp
	UserID      uuid.UUID
	Title       string
	Description string
	Type        ContentType
	S3Key       string
}

func (q *Queries) AddContent(ctx context.Context, arg AddContentParams) (Content, error) {
	row := q.db.QueryRow(ctx, addContent,
		arg.ID,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.Type,
		arg.S3Key,
	)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Type,
		&i.S3Key,
	)
	return i, err
}

const deleteContent = `-- name: DeleteContent :exec
DELETE FROM content WHERE id=$1 AND user_id=$2
`

type DeleteContentParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteContent(ctx context.Context, arg DeleteContentParams) error {
	_, err := q.db.Exec(ctx, deleteContent, arg.ID, arg.UserID)
	return err
}

const getContentById = `-- name: GetContentById :one
SELECT id, created_at, modified_at, user_id, title, description, type, s3_key FROM content WHERE id=$1 FOR UPDATE NOWAIT
`

func (q *Queries) GetContentById(ctx context.Context, id uuid.UUID) (Content, error) {
	row := q.db.QueryRow(ctx, getContentById, id)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Type,
		&i.S3Key,
	)
	return i, err
}

const getContentList = `-- name: GetContentList :many
SELECT (id, created_at, title, description, type) FROM content LIMIT $1 OFFSET $2
`

type GetContentListParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetContentList(ctx context.Context, arg GetContentListParams) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, getContentList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserContent = `-- name: GetUserContent :many
SELECT (id, created_at, title, description, type) FROM content WHERE user_id=$1 LIMIT $2 OFFSET $3
`

type GetUserContentParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetUserContent(ctx context.Context, arg GetUserContentParams) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, getUserContent, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContentDetails = `-- name: UpdateContentDetails :one
UPDATE content SET title=$1, description=$2, type=$3, modified_at=$4
WHERE id=$5
RETURNING id, created_at, modified_at, user_id, title, description, type, s3_key
`

type UpdateContentDetailsParams struct {
	Title       string
	Description string
	Type        ContentType
	ModifiedAt  pgtype.Timestamp
	ID          uuid.UUID
}

func (q *Queries) UpdateContentDetails(ctx context.Context, arg UpdateContentDetailsParams) (Content, error) {
	row := q.db.QueryRow(ctx, updateContentDetails,
		arg.Title,
		arg.Description,
		arg.Type,
		arg.ModifiedAt,
		arg.ID,
	)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Type,
		&i.S3Key,
	)
	return i, err
}

const updateS3Key = `-- name: UpdateS3Key :exec
UPDATE content SET s3_key=$1, modified_at=$2
WHERE id=$3
`

type UpdateS3KeyParams struct {
	S3Key      string
	ModifiedAt pgtype.Timestamp
	ID         uuid.UUID
}

func (q *Queries) UpdateS3Key(ctx context.Context, arg UpdateS3KeyParams) error {
	_, err := q.db.Exec(ctx, updateS3Key, arg.S3Key, arg.ModifiedAt, arg.ID)
	return err
}
